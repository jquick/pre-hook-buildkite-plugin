#!/bin/bash

set -ueo pipefail

function plugin_read_list_into_result() {
  local prefix="$1"
  local parameter="${prefix}_0"
  result=()

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      result+=("${!parameter}")
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    result+=("${!prefix}")
  fi

  [[ ${#result[@]} -gt 0 ]] || return 1
}

function run() {
  file="$1"
  echo "writing pre-hook to ${file}"
  echo
  echo "### executing pre-hook script: ###"
  cat ${file}
  echo "### script end: ###"
  echo

  . ${file}
}

file=""
# Parse and run commands as a script
if [[ -n "${BUILDKITE_PLUGIN_PRE_HOOK_COMMANDS_0:-}" ]]; then
  plugin_read_list_into_result BUILDKITE_PLUGIN_PRE_HOOK_COMMANDS 

  tmpdir=$(mktemp -d)
  file="${tmpdir}/${BUILDKITE_BUILD_NUMBER}-buildkite_prehook.sh"
  printf "%s\n" "${result[@]}" > ${file}
  run "$file"
fi

if [[ -n "${BUILDKITE_PLUGIN_PRE_HOOK_SCRIPT:-}" ]]; then
  if [[ ${BUILDKITE_PLUGIN_PRE_HOOK_SCRIPT:0:1} == "/" ]]; then
    file=${BUILDKITE_PLUGIN_PRE_HOOK_SCRIPT}
  else
    file="${BUILDKITE_BUILD_CHECKOUT_PATH}/${BUILDKITE_PLUGIN_PRE_HOOK_SCRIPT}"
  fi
  run "$file"
fi
